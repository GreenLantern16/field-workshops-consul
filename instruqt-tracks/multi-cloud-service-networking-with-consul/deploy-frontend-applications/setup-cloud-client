#!/bin/bash

mkdir /root/helm
set-workdir /root/helm
cd /root/helm

cat << "SCRIPT" > /usr/local/bin/setup-k8s-consul-secrets
#!/bin/bash -xe
gossip_key=$1
acl_token=$2
injection_token=$3
acl_string=$( jq -n \
                  --arg token "$acl_token" \
                  '{acl: { enabled: true, default_policy: "deny", enable_token_persistence: true, tokens: { agent: $token } } }' )
#base64 the secrets
gossip_key=$(echo -n $gossip_key | base64 -w 0)
injection_token=$(echo -n  $injection_token | base64 -w 0)
ca_cert=$(terraform output -state /root/terraform/consul/terraform.tfstate ca | base64 -w 0)
acl_config=$(echo -n $acl_string | base64 -w 0)
#create the consul namespace
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Namespace
metadata:
  name: consul
EOF
#acl config
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: hashicorp-consul-acl-config
  namespace: consul
type: Opaque
data:
  acl.json: $acl_config
EOF
#tls cert
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: hashicorp-consul-ca-cert
  namespace: consul
type: Opaque
data:
  tls.crt: $ca_cert
EOF
#add the gosip key
cat <<EOF | kubectl apply -n consul -f -
apiVersion: v1
kind: Secret
metadata:
  name: hashicorp-consul-gossip-key
type: Opaque
data:
  key: $gossip_key
EOF
cat <<EOF | kubectl apply -n consul -f -
apiVersion: v1
kind: Secret
metadata:
  name: hashicorp-consul-connect-inject-acl-token
type: Opaque
data:
  token: $injection_token
EOF
SCRIPT
chmod +x /usr/local/bin/setup-k8s-consul-secrets

cat << "SCRIPT" > /usr/local/bin/setup-k8s-consul-auth
#!/bin/bash -xe
namespace=$1
kubectl config use-context eks_${namespace}
cat <<EOF | kubectl apply -f -
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hashicorp-consul-connect-injector-authmethod-svc-account
  namespace: consul
  labels:
    app: consul
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: hashicorp-consul-connect-injector-authmethod-role
  namespace: consul
  labels:
    app: consul
rules:
  - apiGroups: [""]
    resources:
      - serviceaccounts
    verbs:
      - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: hashicorp-consul-connect-injector-authmethod-authdelegator-role-binding
  namespace: consul
  labels:
    app: consul
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "system:auth-delegator"
subjects:
  - kind: ServiceAccount
    name: hashicorp-consul-connect-injector-authmethod-svc-account
    namespace: consul
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: hashicorp-consul-connect-injector-authmethod-serviceaccount-role-binding
  namespace: consul
  labels:
    app: consul
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "hashicorp-consul-connect-injector-authmethod-role"
subjects:
  - kind: ServiceAccount
    name: hashicorp-consul-connect-injector-authmethod-svc-account
    namespace: consul
EOF
k8s_host=$(aws eks describe-cluster --name ${namespace} | jq -r .cluster.endpoint)
k8s_ca=$(aws eks describe-cluster --name ${namespace} | jq -r .cluster.certificateAuthority.data | base64 -d)
k8s_sa=$(kubectl  get sa -n consul hashicorp-consul-connect-injector-authmethod-svc-account -o json | jq -r .secrets[0].name)
k8s_jwt=$(kubectl get secrets -n consul ${k8s_sa} -o json | jq -r .data.token | base64 -d)
consul acl auth-method create -type "kubernetes" \
    -name "hashicorp-consul-k8s-auth-method" \
    -namespace "${namespace}" \
    -description "k8s auth" \
    -kubernetes-host "${k8s_host}" \
    -kubernetes-ca-cert "${k8s_ca}" \
    -kubernetes-service-account-jwt "${k8s_jwt}"
consul acl binding-rule create -method 'hashicorp-consul-k8s-auth-method' \
    -namespace "${namespace}" \
    -description 'apps' \
    -bind-type 'service' \
    -bind-name '${serviceaccount.name}' \
    -selector 'serviceaccount.namespace==default'
SCRIPT
chmod +x /usr/local/bin/setup-k8s-consul-auth

cat << EOF > /root/helm/consul.yaml
global:
  image: 'hashicorp/consul-enterprise:1.8.4-ent'
  domain: consul
  datacenter: gcp-us-central-1
  tls:
    enabled: true
    enableAutoEncrypt: true
    caCert:
      secretName: hashicorp-consul-ca-cert
      secretKey: tls.crt
  acls:
    manageSystemACLs: false
  gossipEncryption:
    secretName: hashicorp-consul-gossip-key
    secretKey: key
externalServers:
  enabled: true
  hosts: ["${lb}"]
  httpsPort: 443
server:
  enabled: false
client:
  enabled: true
  join: ["provider=aws tag_key=Environment-Name tag_value=${env}-consul"]
  extraVolumes:
  - type: 'secret'
    name: 'hashicorp-consul-acl-config'
    load: true
connectInject:
  enabled: true
  default: true
  k8sAllowNamespaces: ["default"]
  aclInjectToken:
    secretName: hashicorp-consul-connect-inject-acl-token
    secretKey: token
  overrideAuthMethodName: hashicorp-consul-k8s-auth-method
EOF

exit 0
