#!/bin/bash

#provision k8s
terraform apply -auto-approve

#configure k8s
AWS_VAULT_IP=$(terraform output -state /root/terraform/vault/terraform.tfstate aws_vault_ip)
export VAULT_ADDR=http://${AWS_VAULT_IP}:8200
export VAULT_TOKEN=$(cat /root/aws_vault_keys.json | jq -r .root_token)
export CONSUL_HTTP_ADDR="http://$(terraform output -state /root/terraform/aws-consul-primary/terraform.tfstate aws_consul_public_ip):8500"
export CONSUL_HTTP_TOKEN=$(vault kv get -field master_token kv/consul)

#react cluster
gcloud container clusters get-credentials $(terraform output -state /root/terraform/k8s-scheduler-services/terraform.tfstate gcp_gke_cluster_react_name) --region us-central1-a
kubectl config rename-context $(kubectl config current-context) react
kubectl config use-context react
kubectl create secret generic hashicorp-consul-ca-cert --from-literal="tls.crt=$(vault read -field certificate pki/cert/ca)"
kubectl create secret generic hashicorp-consul-gossip-key --from-literal="key=$(vault kv get -field=gossip_key kv/consul)"
kubectl create secret generic hashicorp-consul-connect-inject-acl-token --from-literal="token=$(vault kv get -field=master_token kv/consul)"
kubectl create secret generic hashicorp-consul-acl-sync-token --from-literal="token=$(vault kv get -field=master_token kv/consul)"
acl_config=$(jq -n --arg token "$(vault kv get -field=master_token kv/consul)" '{acl: { enabled: true, default_policy: "deny", enable_token_persistence: true, tokens: { agent: $token, default: $token } } }' | base64 -w 0 )
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: hashicorp-consul-acl-config
type: Opaque
data:
  acl.json: $acl_config
EOF
helm install hashicorp hashicorp/consul -f react-values.yaml --debug --wait

#graphql
gcloud container clusters get-credentials $(terraform output -state /root/terraform/k8s-scheduler-services/terraform.tfstate gcp_gke_cluster_graphql_name) --region us-central1-a
kubectl config rename-context $(kubectl config current-context) graphql
kubectl config use-context graphql
kubectl create secret generic hashicorp-consul-ca-cert --from-literal="tls.crt=$(vault read -field certificate pki/cert/ca)"
kubectl create secret generic hashicorp-consul-gossip-key --from-literal="key=$(vault kv get -field=gossip_key kv/consul)"
kubectl create secret generic hashicorp-consul-connect-inject-acl-token --from-literal="token=$(vault kv get -field=master_token kv/consul)"
kubectl create secret generic hashicorp-consul-acl-sync-token --from-literal="token=$(vault kv get -field=master_token kv/consul)"
acl_config=$(jq -n --arg token "$(vault kv get -field=master_token kv/consul)" '{acl: { enabled: true, default_policy: "deny", enable_token_persistence: true, tokens: { agent: $token, default: $token } } }' | base64 -w 0 )
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Secret
metadata:
  name: hashicorp-consul-acl-config
type: Opaque
data:
  acl.json: $acl_config
EOF
helm install hashicorp hashicorp/consul -f graphql-values.yaml --debug --wait

#set up auth
kubectl config use-context shared
export VAULT_TOKEN=$(cat /root/aws_vault_keys.json | jq -r .root_token)
export CONSUL_HTTP_SSL_VERIFY=false
export CONSUL_HTTP_ADDR=https://$(kubectl get svc consul-ui -o json | jq -r .status.loadBalancer.ingress[0].ip)
export CONSUL_HTTP_TOKEN=$(vault kv get -field master_token kv/consul)

kubectl config use-context react
consul acl auth-method create -type "kubernetes" \
    -name "hashicorp-consul-k8s-auth-method-react" \
    -description "react apps" \
    -kubernetes-host "https://$(terraform output -state /root/terraform/k8s-scheduler-services/terraform.tfstate gcp_gke_cluster_react_endpoint)" \
    -kubernetes-ca-cert "$(terraform output -state /root/terraform/k8s-scheduler-services/terraform.tfstate gcp_gke_cluster_react_cluster_ca_certificate | base64 -d)" \
    -kubernetes-service-account-jwt "$(kubectl get secret $(kubectl get sa hashicorp-consul-connect-injector-authmethod-svc-account -o json | jq -r .secrets[0].name) -o json | jq -r .data.token | base64 -d)"
consul acl binding-rule create -method 'hashicorp-consul-k8s-auth-method-react' \
    -description 'react apps' \
    -bind-type 'service' \
    -bind-name '${serviceaccount.name}' \
    -selector 'serviceaccount.namespace==default'

kubectl config use-context graphql
consul acl auth-method create -type "kubernetes" \
    -name "hashicorp-consul-k8s-auth-method-graphql" \
    -description "graphql apps" \
    -kubernetes-host "https://$(terraform output -state /root/terraform/k8s-scheduler-services/terraform.tfstate gcp_gke_cluster_graphql_endpoint)" \
    -kubernetes-ca-cert "$(terraform output -state /root/terraform/k8s-scheduler-services/terraform.tfstate gcp_gke_cluster_graphql_cluster_ca_certificate | base64 -d)" \
    -kubernetes-service-account-jwt "$(kubectl get secret $(kubectl get sa hashicorp-consul-connect-injector-authmethod-svc-account -o json | jq -r .secrets[0].name) -o json | jq -r .data.token | base64 -d)"
consul acl binding-rule create -method 'hashicorp-consul-k8s-auth-method-graphql' \
    -description 'graphql apps' \
    -bind-type 'service' \
    -bind-name '${serviceaccount.name}' \
    -selector 'serviceaccount.namespace==default'

exit 0
