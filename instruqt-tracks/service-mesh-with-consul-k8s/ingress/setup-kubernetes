#!/bin/bash

#npm for jwt decode
apt-get update -y
apt-get install npm -y

npm install -g jwt-cli

#k8s
kubectl apply -f https://www.getambassador.io/yaml/aes-crds.yaml && \
kubectl wait --for condition=established --timeout=90s crd -lproduct=aes && \
kubectl apply -f https://www.getambassador.io/yaml/aes.yaml && \
kubectl -n ambassador wait --for condition=available --timeout=90s deploy -lproduct=aes

cat <<EOF | kubectl apply -n ambassador -f -
---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: ambassador-admin
  name: ambassador-admin
spec:
  type: NodePort
  ports:
  - name: ambassador-admin
    port: 8877
    targetPort: 8877
    nodePort: 31877
  selector:
    service: ambassador
EOF

#kubectl apply -f  https://www.getambassador.io/yaml/consul/ambassador-consul-connector.yaml
cat <<EOF | kubectl apply -n ambassador -f -
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: ambassador-consul-connect
rules:
  - apiGroups: [""]
    resources:
      - secrets
    verbs: ["get", "list", "create", "delete", "patch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ambassador-consul-connect
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ambassador-consul-connect
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ambassador-consul-connect
subjects:
  - kind: ServiceAccount
    name: ambassador-consul-connect
    namespace: ambassador
---
apiVersion: getambassador.io/v2
kind: TLSContext
metadata:
  name: ambassador-consul
spec:
  hosts: []
  secret: ambassador-consul-connect
---
apiVersion: v1
kind: Service
metadata:
  name: ambassador-consul-connector
spec:
  ports:
  - name: ambassador-consul-connector
    port: 80
  selector:
    component: consul-connect
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ambassador-consul-connect-integration
  labels:
    app: ambassador
    component: consul-connect
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ambassador
      component: consul-connect
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ambassador
        component: consul-connect
      annotations:
        "consul.hashicorp.com/connect-inject": "false"
    spec:
      serviceAccountName: ambassador-consul-connect
      terminationGracePeriodSeconds: 0
      containers:
        - name: consul-connect-integration
          image: quay.io/datawire/ambassador_pro:consul_connect_integration-0.11.0
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 50Mi
          env:
            # Consul runs as a DaemonSet on each Node therefore we need to talk to the Host machine.
            # See: https://www.consul.io/docs/platform/k8s/run.html#architecture
            - name: _CONSUL_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
EOF

cat <<EOF | kubectl apply -n ambassador -f -
---
apiVersion: getambassador.io/v2
kind: TracingService
metadata:
  name: tracing
spec:
  service: "jaeger-collector.default.svc.cluster.local:9411"
  driver: zipkin
  config: {}
EOF

#reset the deployment to pick up tracing changes
kubectl rollout restart deployment/ambassador -n ambassador
kubectl wait --for=condition=available --timeout=90s deployment/ambassador -n ambassador

#reset the error rate on our app
sed -i 's/0.5/0.0/' /root/tracing/currency.yml
kubectl apply -f tracing

kubectl wait -n ambassador --for=condition=Ready $(kubectl get pod -n ambassador --selector=service=ambassador -o name)

exit 0
