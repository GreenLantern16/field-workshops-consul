slug: f5-on-azure-app-modernization-with-terraform-consul
id: mi8hobhrlh96
version: 0.0.1
type: track
title: F5 on Azure - App Modernization with Terraform & Consul
teaser: test
description: test
icon: ""
tags: []
owner: hashicorp
developers:
- lance@hashicorp.com
- kcorbin@hashicorp.com
private: true
published: false
challenges:
- slug: provision-azure-vnets
  id: tmsnsut54k9f
  type: challenge
  title: Provision Azure VNETs
  teaser: test
  assignment: |-
    In this assignment you will provision the VNets we will use in the following assignments. <br>

    Inspect and deploy the terraform code.

    In the `Shell` tab run the following commands.
    ```
    terraform plan
    terraform apply -auto-approve
    ```

    Their CIDR blocks are listed below:
    ```
    hcs-vnet: 10.1.0.0/16
    shared-svcs-vnet: 10.2.0.0/16
    legacy-vnet: 10.3.0.0/16
    aks-vnet: 10.4.0.0/16
    ```

    You will leverage these VNet in the next few assignments.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 3000
- slug: provision-core-services
  id: gipovssxptby
  type: challenge
  title: Provision Core Services
  teaser: test
  assignment: |-
    You will use Terraform to provision these services in the background while you set up Consul in the next few assignments. <br>

    Start with Vault. Vault is a secrets management solution that we will use to securely store sensitive information such as usernames, passwords, certificates, and tokens.<br>

    In the `Shell` tab run the following commands.
    ```
    cd /root/terraform/vault
    terraform plan
    nohup terraform apply -auto-approve > /root/terraform/vault/terraform.out &
    ```
    Next, provision AKS. This will be the target environment for the microservices based architecture that applications will be refactored to. <br>
    ```
    cd /root/terraform/aks
    terraform plan
    nohup terraform apply -auto-approve > /root/terraform/aks/terraform.out &
    ```
    Last, provision the HashiCorp Consul service. HCS provides Consul as a Managed service on Azure <br>
    ```
    cd /root/terraform/hcs
    terraform plan
    nohup terraform apply -auto-approve > /root/terraform/hcs/terraform.out &
    ```
    You can continue immediately to the next assignment while these services are provisioning.
    Click the check button now to proceed.
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 3000
- slug: provision-f5
  id: tddd2tm78rzu
  type: challenge
  title: Provision F5
  teaser: test
  assignment: |-
    Now we will provision the F5 BIG-IP Virtual Edition using Terraform. <br>

    In the `Shell` tab run the following commands.
    ```
    terraform plan
    terraform apply -auto-approve
    ```

    This can take several minutes to complete, while you are waiting
    take the opportunity to review the terraform code located at `/root/terraform/bigip`

    Once the apply is complete, you can Navigate to the BIG-IP at the IP address in the terraform output.

    **NOTE:** you will need open the URL provided by the output in a separate tab.  If you are using chrome, you
    may be presented with a certificate error, to bypass this you can type "thisisunsafe" into the Chrome window.

    Now you will upload a [provided](https://github.com/hashicorp/field-workshops-consul/blob/f5-tf-consul-app-mod/instruqt-tracks/f5-on-azure-app-modernization-with-terraform-consul/assets/terraform/bigip/templates/asm_policy.xml) ASM policy to the BIG-IP

    ```
    export CREDS=$(terraform output username):$(terraform output admin_password)

    curl -sku $CREDS -X POST \
      -H "Content-Type: application/octet-stream" \
      -H "Content-Range: 0-783595/783596" \
      $(terraform output mgmt_url)/mgmt/tm/asm/file-transfer/uploads/asm_policy.xml \
      --data-binary "@templates/asm_policy.xml" | jq .

    ```

    Next, import the policy

    ```

    curl -sku $CREDS \
      -H "Content-Type: application/json" \
      -X POST $(terraform output mgmt_url)/mgmt/tm/asm/tasks/import-policy \
      -d '{"filename": "asm_policy.xml", "name": "WAFPolicy"}' | jq .

      ```

      You can review the configured policy by navigating to the `Security -> Application Security -> Security Policies` tab in the F5 management console. <br>
  tabs:
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 3000
- slug: validate-hcs
  id: zkxpyr3mokid
  type: challenge
  title: Validate HCS
  teaser: test
  assignment: |-
    The Consul bootstrap outputs from the last few assignments have been secured in Vault through the provisioning process. <br>
    Login as an operator and inspect the credentials. <br>

    In the `Shell` tab run the following commands.
    ```
    vault login -method=userpass username=operations password=Password1
    ```

    You need to retrieve the bootstrap token from HCS and save it to your Vault instance.

    ```
    echo $CONSUL_HTTP_ADDR
    echo $VAULT_ADDR
    bootstrap_token=$(az hcs create-token --resource-group $(terraform output -state /root/terraform/vnet/terraform.tfstate resource_group_name) --name hcs | jq  -r .masterToken.secretId)
    gossip_key=$(az resource show --ids "/subscriptions/$(az account show | jq -r .id)/resourceGroups/$(terraform output -state /root/terraform/vnet/terraform.tfstate resource_group_name)/providers/Microsoft.Solutions/applications/hcs/customconsulClusters/hashicorp-consul-cluster" --api-version 2018-09-01-preview | jq -r .properties.consulConfigFile | base64 -d | jq -r .encrypt)
    vault kv put secret/consul master_token=${bootstrap_token} gossip_key=${gossip_key}
    ```

    Now inspect the credentials.

    ```
    echo $VAULT_ADDR
    vault kv get secret/consul
    ```

    You can use the master token to create a management token for Vault to issue [dynamic secrets](https://www.vaultproject.io/docs/secrets/consul/) for Consul.
    Get a management token for Vault to manage Consul tokens with.
    You can retrieve the privileged token for this operation from Vault.  <br>

    ```
    export CONSUL_HTTP_TOKEN=$(vault kv get -field=master_token secret/consul)
    vault_consul_mgmt_token=$(consul acl token create -policy-name=global-management -description "vault mgmt" | grep SecretID | cut -d ":" -f2 | xargs)

    ```
    Now configure the secrets engine.

    ```
    vault write consul/config/access address=${CONSUL_HTTP_ADDR} token=${vault_consul_mgmt_token}
    vault read consul/config/access
    ```

    Last, create a policy for the operations team, and link it to the Vault role.

    ```
    consul acl policy create -name "ops" -description "admin policy for ops" -rules 'acl = "write" operator = "write" namespace_prefix "" {acl = "write"}'
    vault write consul/roles/ops policies=ops ttl=1h
    ```

    Now you are ready to get a dynamic Consul token from Vault for an operator.
    Validate the token after you fetch it. <br>

    ```
    export CONSUL_HTTP_TOKEN=$(vault read -field token consul/creds/ops)
    consul acl token read -self
    ```

    You can use this token to set up the anonymous policy.

    ```
    echo '
    node_prefix "" {
      policy = "read"
    }
    service_prefix "" {
      policy = "read"
    }
    session_prefix "" {
      policy = "read"
    }
    agent_prefix "" {
      policy = "read"
    }
    query_prefix "" {
      policy = "read"
    }
    operator = "read"' |  consul acl policy create -name anonymous -rules -
    consul acl token update -id anonymous -policy-name anonymous
    ```

    You will use this role in a later assignment to configure access for Consul service consumers.
  tabs:
  - title: Consul
    type: service
    hostname: workstation
    path: /
    port: 8500
  - title: Vault
    type: service
    hostname: workstation
    path: /
    port: 8200
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 3000
- slug: deploy-legacy-environments
  id: pp5dlxxhxsxu
  type: challenge
  title: Deploy legacy environments
  teaser: test
  assignment: |2-

    In this assignment we will be deploying the current application into Azure based VM's. <br>

    As part of the cloud migration, the VM's will also be configured to run a consul agent that registers these services with Consul.  This will make it easy to refactor the application, as the application is no longer dependent upon static IP addresses which are hardcoded into configuration and application code. <br>

    Additionally, by registering these services in Consul, it is no longer required to manually manage pool members on the F5 applicances, instead, VIP's can be configured to populate backend pool members by monitoring services in Consul. Whenever the application scales up, down, or moves the BIG-IP will automatically update it's configuration. <br>


    To get started, we first need to collect some information from HCS. This information will be stored as environment variables used during the terraform run to deploy the application. <br>

    Grab the HCS endpoint using the az cli command. This endpoint represents the managed Consul cluster and will be used by the agents to connect to the cluster. <br>

    In the `Shell` tab run the following commands.
    ```
    export TF_VAR_endpoint=$(az resource show --ids "/subscriptions/$(az account show | jq -r .id)/resourceGroups/$(terraform output --state ../vnet/terraform.tfstate resource_group_name)/providers/Microsoft.Solutions/applications/hcs/customconsulClusters/hashicorp-consul-cluster" --api-version 2018-09-01-preview | jq -r .properties.consulConfigFile | base64 -d | jq -r .retry_join[0])
    echo $TF_VAR_endpoint
    ```

    Grab the consul client configuration for communicating with the HCS cluster.

    ```
    export TF_VAR_consulconfig=$(az resource show --ids "/subscriptions/$(az account show | jq -r .id)/resourceGroups/$(terraform output -state /root/terraform/vnet/terraform.tfstate resource_group_name)/providers/Microsoft.Solutions/applications/hcs/customconsulClusters/hashicorp-consul-cluster" --api-version 2018-09-01-preview | jq -r .properties.consulConfigFile | base64 -d)
    echo $TF_VAR_consulconfig
    ```

    And the CA certificate for securely communicating with the HCS cluster.

    ```
    export TF_VAR_ca_cert=$(az resource show --ids "/subscriptions/$(az account show | jq -r .id)/resourceGroups/$(terraform output -state /root/terraform/vnet/terraform.tfstate resource_group_name)/providers/Microsoft.Solutions/applications/hcs/customconsulClusters/hashicorp-consul-cluster" --api-version 2018-09-01-preview | jq -r .properties.consulCaFile | base64 -d)
    echo $TF_VAR_ca_cert
    ```
    Next, we will grab the token which is securely stored in Vault. This token will be used by the clients to register themselves, and associated services.

    ```
    export TF_VAR_consul_token=$(vault kv get -field=master_token secret/consul)
    ```

    Now you can deploy the legacy application using terraform.

    ```
    terraform plan
    terraform apply --auto-approve
    ```

    Once this is provisioning is done, you should be able to see the application in the Application tab.  <br>

    The application has now been migrated to the cloud!!! You will explore the environment in the next challange. <br>
  tabs:
  - title: Consul
    type: service
    hostname: workstation
    path: /
    port: 8500
  - title: Vault
    type: service
    hostname: workstation
    path: /
    port: 8200
  - title: Code Editor
    type: service
    hostname: workstation
    port: 8443
  - title: Text Editor
    type: code
    hostname: workstation
    path: /root
  - title: Shell
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 3000
- slug: review-legacy-environment
  id: uduxezyej08m
  type: challenge
  title: Review legacy environment
  teaser: test
  assignment: test
  difficulty: basic
  timelimit: 3000
- slug: scale-the-application
  id: xlknkvvmbhdz
  type: challenge
  title: Scale the application
  teaser: test
  assignment: test
  difficulty: basic
  timelimit: 3000
- slug: deploy-consul-in-aks
  id: kl3g4mrevbng
  type: challenge
  title: Deploy Consul in AKS
  teaser: test
  assignment: test
  difficulty: basic
  timelimit: 3000
- slug: deploy-app-in-k8s
  id: 6jjypzuphebv
  type: challenge
  title: Deploy App in k8s
  teaser: test
  assignment: test
  difficulty: basic
  timelimit: 3000
- slug: test-terminating-gateway
  id: z9j7j1geznsv
  type: challenge
  title: Test Terminating Gateway
  teaser: test
  assignment: test
  difficulty: basic
  timelimit: 3000
checksum: "1417506315462159062"
