#!/bin/bash

#path
echo "export PATH=/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" >> ~/.bashrc

set-workdir /root/terraform/vpc

sleep 10
aws configure set default.region us-east-1
aws ec2 create-default-vpc

#ssh
aws ec2 import-key-pair --key-name "instruqt" --public-key-material file://~/.ssh/id_rsa.pub
eval `ssh-agent -s`

cat << EOF > ~/.ssh/config
Host *
    StrictHostKeyChecking no
EOF

#install terraform
cd /tmp
echo "installing terraform..."
curl -O https://releases.hashicorp.com/terraform/0.12.23/terraform_0.12.23_linux_amd64.zip
unzip *.zip
mv terraform /usr/local/bin/terraform
rm -f *.zip
cd /root

#install consul
cd /tmp
echo "installing consul..."
curl -O https://releases.hashicorp.com/consul/1.7.2+ent/consul_1.7.2+ent_linux_amd64.zip
unzip *.zip
mv consul /usr/local/bin/consul
rm -f *.zip
cd /root

#install vault
cd /tmp
echo "installing vault..."
curl -O https://releases.hashicorp.com/vault/1.3.4/vault_1.3.4_linux_amd64.zip
unzip *.zip
mv vault /usr/local/bin/vault
rm -f *.zip
cd /root

#get assets
echo "cloning assets..."
git clone -b add-consul-instruqt-ent-aws https://github.com/hashicorp/field-workshops-consul.git
cp -r field-workshops-consul/instruqt-tracks/consul-enterprise-on-aws/terraform .
cp -r field-workshops-consul/instruqt-tracks/consul-enterprise-on-aws/packer .
cp -r field-workshops-consul/instruqt-tracks/consul-enterprise-on-aws/apps .
rm -rf field-workshops-consul

#provision
cd /root/terraform/vpc
echo "running terraform..."
/usr/local/bin/terraform init

#consul helper script

#config checks
cat << "EOF" > /usr/local/bin/check-consul-config
#!/bin/bash -xe

file=$1
consul_asg=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[?contains(Tags[?Key=='Role'].Value, 'consul')].[AutoScalingGroupName]" --output text)
consul_instance=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name $consul_asg --output json | jq -r '[.. |."InstanceId"? | select(. != null)][0]')
bastion_instance=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].InstanceId' --filters "Name=tag:Name,Values=bastion" --output text)
consul_ip=$(aws ec2 describe-instances --instance-ids ${consul_instance} --query 'Reservations[].Instances[].PrivateIpAddress' --output text)
bastion_ip=$(aws ec2 describe-instances --instance-ids ${bastion_instance} --query 'Reservations[].Instances[].PublicIpAddress' --output text)
ssh -A -J ubuntu@${bastion_ip} ec2-user@${consul_ip} "sudo cat $file"
EOF
chmod +x /usr/local/bin/check-consul-config

#k8s configurations
cat << "SCRIPT" > /usr/local/bin/setup-k8s-consul-cluster
#!/bin/bash -xe

gossip_key=$1
acl_token=$2
injection_token=$3

#base64 the secrets
gossip_key=$(echo -n $gossip_key | base64 -w 0)
acl_token=$(echo -n  $acl_token | base64 -w 0)
injection_token=$(echo -n  $injection_token | base64 -w 0)

#create the consul namespace
cat <<EOF | kubectl apply -f -
apiVersion: v1
kind: Namespace
metadata:
  name: consul
EOF

#add the gosip key
cat <<EOF | kubectl apply -n consul -f -
apiVersion: v1
kind: Secret
metadata:
  name: hashicorp-consul-gossip-key
type: Opaque
data:
  key: $gossip_key
EOF

cat <<EOF | kubectl apply -n consul -f -
apiVersion: v1
kind: Secret
metadata:
  name: hashicorp-consul-client-acl-token
type: Opaque
data:
  token: $acl_token
EOF
cat <<EOF | kubectl apply -n consul -f -
apiVersion: v1
kind: Secret
metadata:
  name: hashicorp-consul-connect-inject-acl-token
type: Opaque
data:
  token: $injection_token
EOF
SCRIPT
chmod +x /usr/local/bin/setup-k8s-consul-cluster

#k8s auth methods
cat << "SCRIPT" > /usr/local/bin/setup-k8s-consul-auth
#!/bin/bash -xe

namespace=$1

kubectl config use-context eks_${namespace}

k8s_host=$(aws eks describe-cluster --name ${namespace} | jq -r .cluster.endpoint)
k8s_ca=$(aws eks describe-cluster --name ${namespace} | jq -r .cluster.certificateAuthority.data | base64 -d)

k8s_sa=$(kubectl  get sa -n consul hashicorp-consul-connect-injector-authmethod-svc-account -o json | jq -r .secrets[0].name)
k8s_jwt=$(kubectl get secrets -n consul ${k8s_sa} -o json | jq -r .data.token | base64 -d)

consul acl auth-method create -type "kubernetes" \
    -name "hashicorp-consul-k8s-auth-method" \
    -namespace "${namespace}" \
    -description "k8s auth" \
    -kubernetes-host "${k8s_host}" \
    -kubernetes-ca-cert "${k8s_ca}" \
    -kubernetes-service-account-jwt "${k8s_jwt}"

consul acl binding-rule create -method 'hashicorp-consul-k8s-auth-method' \
    -namespace "${namespace}" \
    -description 'apps' \
    -bind-type 'service' \
    -bind-name '${serviceaccount.name}' \
    -selector 'serviceaccount.namespace==default'
SCRIPT
chmod +x /usr/local/bin/setup-k8s-consul-auth

exit 0
