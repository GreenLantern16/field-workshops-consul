#!/bin/bash

if [ -f /tmp/skip-check ]; then
    rm /tmp/skip-check
    exit 0
fi

#check the clusters and worker nodes
kubectl config use-context eks_frontend
frontend=$(aws eks describe-cluster --name frontend | jq -r .cluster.status)
if [ "${frontend}" != "ACTIVE" ]; then
  fail-message "Frontend EKS cluster did not provision. Current state is: ${frontend}"
  exit 1
fi
JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'  && kubectl get nodes -o jsonpath="$JSONPATH" | grep "Ready=True"
if [ $? -ne 0 ]
then
  fail-message "Worker node for frontend cluster is not ready."
  exit 1
fi

kubectl config use-context eks_backend
backend=$(aws eks describe-cluster --name backend | jq -r .cluster.status)
if [ "${backend}" != "ACTIVE" ]; then
  fail-message "Backend EKS cluster did not provision. Current state is: ${backend}"
  exit 1
fi
JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'  && kubectl get nodes -o jsonpath="$JSONPATH" | grep "Ready=True"
if [ $? -ne 0 ]
then
  fail-message "Worker node for backend cluster is not ready."
  exit 1
fi

#check the kubeconfig
if [[ ! -f /root/.kube/config  ]]
then
    fail-message "Kube config file not found."
fi

exit 0
