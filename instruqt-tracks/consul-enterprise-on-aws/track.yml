slug: consul-enterprise-on-aws
id: uyhpz2gmcv6f
type: track
title: Consul Enterprise on AWS
teaser: A short description of the track.
description: |-
  A long description of the track.

  You can use any GitHub flavoured markdown.
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/default.png
tags: []
owner: hashicorp
developers:
- lance@hashicorp.com
private: true
published: true
challenges:
- slug: validate-your-environment
  id: zf9q5j426xdi
  type: challenge
  title: 'Infrastructure: Validate the Environment'
  teaser: A short description of the challenge.
  assignment: |-
    The cloud infrastructure team has already set up cloud infrastructure for this environment.
    You can think of workstation terminal as your developer machine preloaded with cloud access credentials. <br>

    Any any time you can use the AWS console to view your environment.
    AWS CLI commands will be provided for you to interact with AWS's APIs. <br>


    View the VPCs in your environment.

    ```
    aws ec2 describe-vpcs
    ```

    You'll notice you have four separate VPCs that map to the infra diagram shared earlier.
    Their CIDR blocks are listed below.

    ```
    terraform-vpc-shared-svcs: 10.1.0.0/16
    terraform-vpc-frontend: 10.2.0.0/16
    terraform-vpc-api: 10.3.0.0/16
    terraform-vpc-storage: 10.4.0.0/16
    ```

    Our shared service VPC will run the core Consul infrastructure.
    You will provision the Consul servers in the next assignment.
  notes:
  - type: text
    contents: |-
      In this assignment you will familiarize yourself with the AWS cloud
      environment. <br>

      Please be patient as we provision your cloud environment in AWS.
  tabs:
  - title: Cloud CLI
    type: terminal
    hostname: cloud-client
  - title: Terraform
    type: code
    hostname: cloud-client
    path: /root/terraform/infra
  - title: Cloud Consoles
    type: service
    hostname: cloud-client
    path: /
    port: 80
  difficulty: basic
  timelimit: 3000
- slug: build-consul-image
  id: gudhtmhdc2au
  type: challenge
  title: 'Infrastructure: Build Consul Image'
  teaser: A short description of the challenge.
  assignment: |-
    In this assignment you will build an immutable image of [Consul with HashiCorp Packer](https://packer.io/) <br>

    Immutability has many advantages for infrastructure management.
    Consul enterprise can take advantage of immutable patterns with [Automated Upgrades](https://www.consul.io/docs/enterprise/upgrades/index.html)

    The Packer build has been set up for you. Inspect the variable file, then build the image.

    ```
    cat /root/packer/vars.json
    AWS_REGION=us-east-1 packer build -var-file vars.json centos.json
    ```

    Validate your AMI is available in us-east-1.

    ```
    aws ec2 describe-images --owners self
    ```

    Now that you have a Consul image, you're ready to provision Consul in a prod-like ASG.
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Cloud CLI
    type: terminal
    hostname: cloud-client
  - title: Packer
    type: code
    hostname: cloud-client
    path: /root/packer
  - title: Cloud Consoles
    type: service
    hostname: cloud-client
    path: /
    port: 80
  difficulty: basic
  timelimit: 3000
- slug: provision-consul
  id: lb5bfvjidxkm
  type: challenge
  title: 'Infrastructure: Provision Consul'
  teaser: A short description of the challenge.
  assignment: |-
    In this assignment, you'll install the ASG that will run the Consul servers.
    The terraform module is configured to use the packer image you created in the last assignment. <br>

    Inspect the variable file, then deploy Consul.

    ```
    cat consul.auto.tfvars
    terraform apply -auto-approve
    ```

    Now, validate the Consul servers deployed to AWS. <br>

    ```
    aws autoscaling describe-auto-scaling-groups
    ```

    You should see the Consul servers with a ``*-0.0.1` postfix.
    You will increment the deployment in the next exercise to finish the immutable bootstrap.

    Let's inspect one of the newly provisioned Consul instances.
    We can access the newly provisioned instance through our bastion host.

    ```
    consul_instance=$(aws autoscaling describe-auto-scaling-groups --output json | jq -r '[.. |."InstanceId"? | select(. != null)][0]')
    bastion_instance=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].InstanceId' --filters "Name=tag:Name,Values=bastion" --output text)

    consul_ip=$(aws ec2 describe-instances --instance-ids ${consul_instance} --query 'Reservations[].Instances[].PrivateIpAddress' --output text)
    bastion_ip=$(aws ec2 describe-instances --instance-ids ${bastion_instance} --query 'Reservations[].Instances[].PublicIpAddress' --output text)

    ssh -A -J ubuntu@${bastion_ip} ec2-user@${consul_ip} 'sudo cat /etc/consul.d/consul.hcl'
    ```

    To finish the bootstrap process, we need to set the following value: `default_policy = "deny"`. <br>

    Go to the next assignment, and finish the bootstrap.
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Cloud CLI
    type: terminal
    hostname: cloud-client
  - title: Terraform
    type: code
    hostname: cloud-client
    path: /root/terraform/consul
  - title: Cloud Consoles
    type: service
    hostname: cloud-client
    path: /
    port: 80
  difficulty: basic
  timelimit: 300
- slug: bootstrap-consul
  id: e9a2xlzwes8d
  type: challenge
  title: 'Infrastructure: Bootstrap Consul'
  teaser: A short description of the challenge.
  assignment: |-
    Consul Enterprise supports an [upgrade pattern](https://learn.hashicorp.com/consul/day-2-operations/autopilot#upgrade-migrations) that allows operators to deploy a complete cluster of new servers,
    and safely migrate the new servers until the upgrade is complete. <br>

    In the second terminal window, you will watch the new servers added as `non-voters`.
    Once autopilot has validated the new servers, it will safely promote them.
    You will see the old servers removed from the list.

    ```
    watch consul operator raft list-peers
    ```

    Next, make the following two changes to the `consul.auto.tfvars file` to complete the bootstrap:
      * consul_cluster_version = "0.0.2"
      * bootstrap = false

    Now run terraform, and watch the servers automatically transition.

    ```
    cat consul.auto.tfvars
    terraform apply -auto-approve
    ```

    Nice work! You just did an automated server update with Consul enterprise. <br>

    You can now validate the changes. Notice the `node_meta` is for the `0.0.2` version of the deployment.
    You can also see that the `default_policy` for ACLs was updated for the new value.

    ```
    consul catalog nodes --detailed

    consul_instance=$(aws autoscaling describe-auto-scaling-groups --output json | jq -r '[.. |."InstanceId"? | select(. != null)][0]')
    bastion_instance=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].InstanceId' --filters "Name=tag:Name,Values=bastion" --output text)
    consul_ip=$(aws ec2 describe-instances --instance-ids ${consul_instance} --query 'Reservations[].Instances[].PrivateIpAddress' --output text)
    bastion_ip=$(aws ec2 describe-instances --instance-ids ${bastion_instance} --query 'Reservations[].Instances[].PublicIpAddress' --output text)
    ssh -A -J ubuntu@${bastion_ip} ec2-user@${consul_ip} 'sudo cat /etc/consul.d/consul.hcl'
    ```

    Now you can start setting up the tenants for the Consul shared service consumers.
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Cloud CLI
    type: terminal
    hostname: cloud-client
  - title: Cloud CLI - watch
    type: terminal
    hostname: cloud-client
  - title: Terraform
    type: code
    hostname: cloud-client
    path: /root/terraform/consul
  - title: Cloud Consoles
    type: service
    hostname: cloud-client
    path: /
    port: 80
  difficulty: basic
  timelimit: 300
checksum: "6105431671320264528"
