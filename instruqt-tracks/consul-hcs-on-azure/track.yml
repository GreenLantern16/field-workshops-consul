slug: hcs-on-azure
id: ztymj0qpq0vy
version: 0.0.1
type: track
title: HCS on Azure
description: placeholder
icon: ""
tags: []
owner: hashicorp
developers:
- cpu@hashicorp.com
- lance@hashicorp.com
private: true
published: true
challenges:
- slug: provision-azure-virtual-networks
  id: bsyydcckaasv
  type: challenge
  title: 'Infrastructure: Provision Azure Virtual Networks'
  teaser: A short description of the challenge.
  assignment: |-
    You need to provide the workstation with credentials from your Azure account.
    Don't forget to set the correct subscription if your account has multiple subscriptions.

    ```
    az login
    ```

    You can think of the Cloud CLI terminal as your laptop machine preloaded with cloud access credentials for your company. <br>

    At any time you can use the Azure console to view your environment.
    Azure CLI commands will be provided for you to interact with Azure throughout this lab. <br>

    Your first task is setting up VPCs for each team.

    Inspect the Terraform code, and then provision the VPCs.

    ```
    terraform plan
    terraform apply -auto-approve
    ```

    You'll notice you have three separate VPCs.

    ```
    az network vnet list
    ```

    Their CIDR blocks are listed below:

    ```
    shared-svcs-vnet: 10.1.0.0/16
    frontend-vnet: 10.2.0.0/16
    backend-vnet: 10.3.0.0/16
    ```

    The shared service VNet will run the core Consul infrastructure.
    You will provision the Consul servers into this VNet in the next few assignments.
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Terraform
    type: code
    hostname: cloud-client
    path: /root/terraform/vnet
  - title: Cloud  CLI
    type: terminal
    hostname: cloud-client
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/01-provision-azure-virtual-networks.html
  - title: Target lab architecture
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/16-final-architecture-hcs.html
  difficulty: basic
  timelimit: 3600
- slug: provision-core-services
  id: cmp9zoq1joar
  type: challenge
  title: 'Infrastructure: Provision Core Services'
  teaser: A short description of the challenge.
  assignment: |-
    You will use Terraform to provision these services in the background while you set up Consul in the next few assignments. <br>

    Start with Vault. <br>

    ```
    cd /root/terraform/vault
    terraform plan
    nohup terraform apply -auto-approve > /root/terraform/vault/terraform.out &
    ```

    Next, provision AKS. <br>

    ```
    cd /root/terraform/aks
    terraform plan
    nohup terraform apply -auto-approve > /root/terraform/aks/terraform.out &
    ```

    Last, provision the Virtual Network Gateway. This resource can take *30 minutes to 1 hour* to provision.

    ```
    cd /root/terraform/vgw
    terraform plan
    nohup terraform apply -auto-approve > /root/terraform/vgw/terraform.out &
    ```

    You can continue immediately to the next assignment while these services are provisioning.
    Click the check button now to proceed.
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Cloud CLI
    type: terminal
    hostname: cloud-client
  - title: Terraform
    type: code
    hostname: cloud-client
    path: /root/terraform
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/02-provision-core-services.html
  - title: Target lab architecture
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/16-final-architecture-hcs.html
  difficulty: basic
  timelimit: 3600
- slug: provision-hcs
  id: ufjqo5xsryqp
  type: challenge
  title: 'Infrastructure: Provision HCS'
  teaser: A short description of the challenge.
  assignment: |-
    Inspect the Terraform code, and then run Terraform to provision your HCS cluster.

    ```
    terraform plan
    terraform apply -auto-approve
    ```

    This can take 15 minutes to 30 minutes to provision.
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Cloud CLI
    type: terminal
    hostname: cloud-client
  - title: Terraform
    type: code
    hostname: cloud-client
    path: /root/terraform
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/03-provision-hcs.html
  - title: Target lab architecture
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/16-final-architecture-hcs.html
  difficulty: basic
  timelimit: 3600
- slug: centralize-consul-secrets
  id: 7lfblywioxsc
  type: challenge
  title: 'Security: Centralize Consul Secrets'
  teaser: A short description of the challenge.
  assignment: |-
    The Consul bootstrap outputs from the last few assignments have been secured in Vault through the provisioning process. <br>

    Login as an operator and inspect the credentials. <br>

    ```
    vault login -method=userpass username=operations password=Password1
    ```

    You need to retrieve the bootstrap token from HCS and save it to your Vault instance.

    ```
    echo $CONSUL_HTTP_ADDR
    bootstrap_token=$(consul acl bootstrap -format json | jq -r .SecretID)
    gossip_key=$(az resource show --ids "/subscriptions/$(az account show | jq -r .id)/resourceGroups/hashicorp-instruqt/providers/Microsoft.Solutions/applications/hcs/customconsulClusters/hashicorp-consul-cluster" --api-version 2018-09-01-preview | jq -r .properties.consulConfigFile | base64 -d | jq -r .encrypt)
    vault kv put secret/consul master_token=${bootstrap_token} gossip_key=${gossip_key}
    ```

    Now inspect the credentials.

    ```
    echo $VAULT_ADDR
    vault kv get secret/consul
    ```

    You can use the master token to create a management token for Vault to issue [dynamic secrets](https://www.vaultproject.io/docs/secrets/consul/) for Consul.

    Get a management token for Vault to manage Consul tokens with.
    You can retrieve the privileged token for this operation from Vault.  <br>

    ```
    export CONSUL_HTTP_TOKEN=$(vault kv get -field=master_token secret/consul)
    vault_consul_mgmt_token=$(consul acl token create -policy-name=global-management -description "vault mgmt" | grep SecretID | cut -d ":" -f2 | xargs)
    ```

    Now configure the secrets engine.

    ```
    vault write consul/config/access address=${CONSUL_HTTP_ADDR} token=${vault_consul_mgmt_token}
    vault read consul/config/access
    ```

    Last, create a policy for the operations team, and link it to the Vault role.

    ```
    consul acl policy create -name "ops" -description "admin policy for ops" -rules 'acl = "write" operator = "write" namespace_prefix "" {acl = "write"}'
    vault write consul/roles/ops policies=ops ttl=1h
    ```

    Now you are ready to get a dynamic Consul token from Vault for an operator.
    Validate the token after you fetch it. <br>

    ```
    export CONSUL_HTTP_TOKEN=$(vault read -field token consul/creds/ops)
    consul acl token read -self
    ```

    You will use this role in a later assignment to configure access for Consul service consumers.
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Cloud CLI
    type: terminal
    hostname: cloud-client
  - title: Consul
    type: service
    hostname: cloud-client
    path: /
    port: 8500
  - title: Vault
    type: service
    hostname: cloud-client
    path: /
    port: 8200
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/04-centralize-consul-secrets.html
  - title: Target lab architecture
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/16-final-architecture-hcs.html
  difficulty: basic
  timelimit: 3600
- slug: validate-virtual-gateway-and-peering
  id: hufkoyrn9f12
  type: challenge
  title: 'Network: Validate Virtual Gateway & Peering'
  teaser: A short description of the challenge.
  assignment: |-
    The VGW and VNet peerings provisioned eariler should now be ready. <br>

    Inspect the the gateway and the peering connections.

    ```
    az network vnet-gateway list --resource-group hashicorp-instruqt
    az network vnet peering list --resource-group hashicorp-instruqt --vnet-name shared-svcs-vnet
    az network vnet peering list --resource-group hashicorp-instruqt --vnet-name frontend-vnet
    az network vnet peering list --resource-group hashicorp-instruqt --vnet-name backend-vnet
    ```

    In a later assignment you will use the VNet peers to enable remote gateways for the spoke VNets.
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Cloud CLI
    type: terminal
    hostname: cloud-client
  - title: Consul
    type: service
    hostname: cloud-client
    path: /
    port: 8500
  - title: Vault
    type: service
    hostname: cloud-client
    path: /
    port: 8200
  - title: Terraform
    type: code
    hostname: cloud-client
    path: /root/terraform
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/05-validate-virtual-gateway-and-peering.html
  - title: Target lab architecture
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/16-final-architecture-hcs.html
  difficulty: basic
  timelimit: 3600
- slug: create-remote-gateways
  id: ug6c6cq6fyxd
  type: challenge
  title: 'Network: Create Remote Gateways'
  teaser: A short description of the challenge.
  assignment: |-
    You can now enable spoke VNets to use the shared service gateway.

    Check that the first Terraform run finished.
    You may need to wait an additional 10 to 15 minutes. <br>

    ```
    tail -f terraform.out
    ```

    Inspect the variable configuration and apply this now.

    ```
    cat terraform.tfvars
    terraform plan
    terraform apply -auto-approve
    ```

    Inspect the peering again and notice that remote gateways are enabled.

    ```
    az network vnet peering list --resource-group hashicorp-instruqt --vnet-name shared-svcs-vnet
    az network vnet peering list --resource-group hashicorp-instruqt --vnet-name frontend-vnet
    az network vnet peering list --resource-group hashicorp-instruqt --vnet-name backend-vnet
    ```

    You will also notice that each AKS VNet has a user defined route to use the remote gateway for cross VNet traffic.

    ```
    az network route-table show -g hashicorp-instruqt -n frontend-shared-aks
    az network route-table show -g hashicorp-instruqt -n backend-shared-aks
    ```

    Now that you have routes in place you can configure the AKS clusters for the Consul deployment.
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Cloud CLI
    type: terminal
    hostname: cloud-client
  - title: Consul
    type: service
    hostname: cloud-client
    path: /
    port: 8500
  - title: Vault
    type: service
    hostname: cloud-client
    path: /
    port: 8200
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/06-create-remote-gateways.html
  - title: Target lab architecture
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/16-final-architecture-hcs.html
  difficulty: basic
  timelimit: 3600
- slug: validate-aks-clusters
  id: olvgj2uu5trf
  type: challenge
  title: 'Infrastructure: Validate AKS Clusters'
  teaser: A short description of the challenge.
  assignment: |-
    Your AKS clusters should now be provisioned and ready.

    ```
    az aks list
    ```

    First, create a merged Kube Config file from the Terraform outputs.

    ```
    terraform output frontend_kube_config > kubeconfig_frontend
    terraform output backend_kube_config > kubeconfig_backend
    KUBECONFIG=kubeconfig_frontend:kubeconfig_backend kubectl config view --merge --flatten > ~/.kube/config
    ```

    Next, check the worker nodes are ready in each cluster.
    Start with the Frontend cluster.

    ```
    kubectl config use-context frontend-aks
    kubectl get nodes -o wide
    ```

    Now check the Backend cluster.

    ```
    kubectl config use-context backend-aks
    kubectl get nodes -o wide
    ```
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Cloud CLI
    type: terminal
    hostname: cloud-client
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/07-validate-aks-clusters.html
  - title: Target lab architecture
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/16-final-architecture-hcs.html
  difficulty: basic
  timelimit: 3600
- slug: create-namespaces-and-policies
  id: zklbwtiaci0u
  type: challenge
  title: 'Operations: Create Namespaces and Policies'
  teaser: A short description of the challenge.
  assignment: |-
    You need a privileged operator token to configure Consul for the consuming teams.
    Authenticate with Vault, and fetch a token. <br>

    ```
    vault login -method=userpass username=operations password=Password1
    export CONSUL_HTTP_TOKEN=$(vault read -field token consul/creds/ops)
    consul acl token read -self
    ```

    The service discovery policy will underpin all development tenants.
    This will allow the mesh to discover services across teams, however, individuals teams will control what services can connect to them from other namespaces. <br>

    ```
    consul acl policy create -name "cross-namespace-policy" -description "cross-namespace service discovery" -rules @cross-namespace.hcl
    ```

    The K8s injector policy will allow read access to the namespaces available within the Consul service.
    This is required for the Consul K8s integration to work properly. <br>

    ```
    consul acl policy create -name "k8s-injector-policy" -description "k8s injection" -rules @injector.hcl
    ```

    Now you can create the namespaces for each development team, that share the namespace discovery policy. <br>

    ```
    consul namespace write frontend-namespace.hcl
    consul namespace write backend-namespace.hcl
    ```

    You also need to create policies for low level client agent permissions for each development VPC.
    We will create a blast radius for these tokens by CIDR block. <br>

    ```
    consul acl policy create -name "frontend-agent-policy" -description "frontend agents" -rules @frontend-team-agent.hcl
    consul acl policy create -name "backend-agent-policy" -description "backend agents" -rules @backend-team-agent.hcl
    ```

    Last, create policies for the development teams to manage their own intentions.
    Intentions allow connectivity between services. <br>

    ```
    consul acl policy create -name "frontend-developer-policy" -description "frontend dev" -rules @frontend-team-developer.hcl
    consul acl policy create -name "backend-developer-policy" -description "backend dev" -rules @backend-team-developer.hcl

    ```

    In the next assignment we will link these policies to dynamic Vault roles so developers and operators can get access centrally.
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Cloud CLI
    type: terminal
    hostname: cloud-client
  - title: Consul
    type: service
    hostname: cloud-client
    path: /
    port: 8500
  - title: Vault
    type: service
    hostname: cloud-client
    path: /
    port: 8200
  - title: Policies
    type: code
    hostname: cloud-client
    path: /root/policies
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/08-create-namespaces-and-policies.html
  - title: Target lab architecture
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/16-final-architecture-hcs.html
  difficulty: basic
  timelimit: 300
- slug: create-consul-roles
  id: vx2qbphc6qgi
  type: challenge
  title: 'Security: Create Consul Roles'
  teaser: A short description of the challenge.
  assignment: |-
    Authenticate with the Consul operations role.

    ```
    vault login -method=userpass username=operations password=Password1
    export CONSUL_HTTP_TOKEN=$(vault read -field token consul/creds/ops)
    consul acl token read -self
    ```

    Next, link the policies. The TTLs are scoped for each task.

    ```
    vault write consul/roles/k8s-injector           policies=k8s-injector-policy          ttl=720h
    vault write consul/roles/frontend-agent         policies=frontend-agent-policy        ttl=720h
    vault write consul/roles/frontend-developer     policies=frontend-developer-policy    ttl=1h
    vault write consul/roles/backend-agent          policies=backend-agent-policy         ttl=720h
    vault write consul/roles/backend-developer      policies=backend-developer-policy     ttl=1h
    ```

    You will use these roles in later assignments to seed K8s clusters with scoped access to the central service,
    as well as allow developers the ability to configure routing within their tenant.
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Cloud CLI
    type: terminal
    hostname: cloud-client
  - title: Consul
    type: service
    hostname: cloud-client
    path: /
    port: 8500
  - title: Vault
    type: service
    hostname: cloud-client
    path: /
    port: 8200
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/09-create-consul-roles.html
  - title: Target lab architecture
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/16-final-architecture-hcs.html
  difficulty: basic
  timelimit: 300
- slug: configure-aks-cluster-secrets
  id: gekjc0ubhf5q
  type: challenge
  title: 'Operations: Configure AKS Cluster Secrets'
  teaser: A short description of the challenge.
  assignment: |-
    You need to authenticate with Vault to gain access to the Consul roles required to provide secrets for the K8s clusters.

    ```
    vault login -method=userpass username=operations password=Password1
    export CONSUL_HTTP_TOKEN=$(vault read -field token consul/creds/ops)
    consul acl token read -self
    ```

    A sample script has been provided to setup each K8s cluster.
    The script will perform the following tasks:

    * Create a namespace to run Consul pods (injector webhooks, daemonset, etc.)
    * Provide a Consul gossip key
    * Provide a Consul ACL token

    Inspect the setup script.

    ```
    cat /usr/local/bin/setup-k8s-consul-secrets
    ```

    Start with the frontend cluster.

    ```
    kubectl config use-context frontend-aks
    setup-k8s-consul-secrets hashicorp-instruqt hcs hashicorp-consul-cluster $(vault kv get -field gossip_key secret/consul) $(vault read -field token consul/creds/frontend-agent) $(vault read -field token consul/creds/k8s-injector)
    kubectl  get secrets -n consul
    ```

    Repeat, for the backend cluster.

    ```
    kubectl config use-context backend-aks
    setup-k8s-consul-secrets hashicorp-instruqt hcs hashicorp-consul-cluster $(vault kv get -field gossip_key secret/consul) $(vault read -field token consul/creds/backend-agent) $(vault read -field token consul/creds/k8s-injector)
    kubectl get secrets -n consul
    ```

    In the next assignment you will use these secrets to deploy the Consul client agents with Helm.
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Cloud CLI
    type: terminal
    hostname: cloud-client
  - title: Consul
    type: service
    hostname: cloud-client
    path: /
    port: 8500
  - title: Vault
    type: service
    hostname: cloud-client
    path: /
    port: 8200
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/10-configure-aks-cluster-secrets.html
  - title: Target lab architecture
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/16-final-architecture-hcs.html
  difficulty: basic
  timelimit: 300
- slug: deploy-consul-in-aks
  id: qwpzslmpsjrf
  type: challenge
  title: 'Operations: Deploy Consul in AKS'
  teaser: A short description of the challenge.
  assignment: |-
    Use the code editor to inspect the Helm chart values for each K8s cluster.
    When you have reviewed the values you can deploy each K8s cluster.

    Start with the frontend cluster.

    ```
    kubectl config use-context frontend-aks
    helm install hashicorp -f frontend-values.yaml --namespace consul ./consul-helm --wait --debug
    kubectl get pods -n consul
    ```

    Repeat for the backend cluster.

    ```
    kubectl config use-context backend-aks
    helm install hashicorp -f backend-values.yaml --namespace consul ./consul-helm --wait --debug
    kubectl get pods -n consul
    ```

    Check the nodes for the full working set.
    You can continue when the Frontend and Backend AKS nodes have joined the peer set. <br>

    ```
    watch consul members
    ```

    In the next assignment we will create trust between the K8s API server and the Consul shared service.
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Helm
    type: code
    hostname: cloud-client
    path: /root/helm
  - title: Cloud  CLI
    type: terminal
    hostname: cloud-client
  - title: Cloud  CLI
    type: terminal
    hostname: cloud-client
  - title: Consul
    type: service
    hostname: cloud-client
    path: /
    port: 8500
  - title: Vault
    type: service
    hostname: cloud-client
    path: /
    port: 8200
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/11-deploy-consul-in-aks.html
  - title: Target lab architecture
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/16-final-architecture-hcs.html
  difficulty: basic
  timelimit: 300
- slug: configure-k8s-consul-authentication
  id: pizuaunrknfk
  type: challenge
  title: 'Security: Configure K8s Consul Authentication'
  teaser: A short description of the challenge.
  assignment: |-
    Configuring Consul auth methods is a privileged action.
    You need a Consul operator token to perform these tasks. <br>

    ```
    vault login -method=userpass username=operations password=Password1
    export CONSUL_HTTP_TOKEN=$(vault read -field token consul/creds/ops)
    consul acl token read -self
    ```

    The cross namespace policy you created earlier will be attached to the token.
    You need three key pieces of information to complete this task. <br>

    * K8s endpoint
    * K8s CA
    * Service Account JWT

    The helper script will assist you. Review it now. <br>

    ```
    cat /usr/local/bin/setup-k8s-consul-auth
    ```

    Run the script for each K8s cluster.

    ```
    setup-k8s-consul-auth frontend
    setup-k8s-consul-auth backend
    ```

    In the next assignment you'll use the trust relationship you just created to deploy applications into the mesh.
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Cloud  CLI
    type: terminal
    hostname: cloud-client
  - title: Consul
    type: service
    hostname: cloud-client
    path: /
    port: 8500
  - title: Vault
    type: service
    hostname: cloud-client
    path: /
    port: 8200
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/12-configure-k8s-consul-authentication.html
  - title: Target lab architecture
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/16-final-architecture-hcs.html
  difficulty: basic
  timelimit: 300
- slug: deploy-applications
  id: aayejvgkybat
  type: challenge
  title: 'Developer: Deploy Application'
  teaser: test
  assignment: |-
    You can view the K8s spec files for the applications in the code editor. <br>

    Start with the Frontend cluster application. <br>

    ```
    kubectl config use-context frontend-aks
    kubectl apply -f frontend
    kubectl wait --for=condition=Ready $(kubectl get pod --selector=app=web -o name) --timeout=30s
    ```

    Now deploy the backend cluster applications. <br>

    ```
    kubectl config use-context backend-aks
    kubectl apply -f backend
    kubectl wait --for=condition=Ready $(kubectl get pod --selector=app=api -o name) --timeout=30s
    kubectl wait --for=condition=Ready $(kubectl get pod --selector=app=cache -o name) --timeout=30s
    kubectl wait --for=condition=Ready $(kubectl get pod --selector=app=currency -o name) --timeout=30s
    kubectl wait --for=condition=Ready $(kubectl get pod --selector=app=payments -o name) --timeout=30s
    ```

    In the next assignment we will update intentions so the new applications will receive traffic over mTLS.
  tabs:
  - title: Cloud  CLI
    type: terminal
    hostname: cloud-client
  - title: Cloud  CLI
    type: terminal
    hostname: cloud-client
  - title: Consul
    type: service
    hostname: cloud-client
    path: /
    port: 8500
  - title: Vault
    type: service
    hostname: cloud-client
    path: /
    port: 8200
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/13-deploy-applications.html
  - title: Target lab architecture
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/16-final-architecture-hcs.html
  difficulty: basic
  timelimit: 500
- slug: update-intentions
  id: t11vsafayxq1
  type: challenge
  title: 'Developer: Update Intentions'
  teaser: A short description of the challenge.
  assignment: |-
    Retrieve a Consul token as backend developer team. <br>

    ```
    vault login -method=userpass username=backend password=Password1
    export CONSUL_HTTP_TOKEN=$(vault read -field token consul/creds/backend-developer)
    consul acl token read -self
    ```

    Create the intentions for services within your namespace.
    Also allow access from the Frontend Web application to the Backend API application. <br>

    ```
    consul intention create --allow frontend/web backend/api
    consul intention create --allow backend/api backend/cache
    consul intention create --allow backend/api backend/payments
    consul intention create --allow backend/payments backend/currency
    ```

    In the next assignment you will send traffic to the Web application in the Frontend namespace.
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Cloud  CLI
    type: terminal
    hostname: cloud-client
  - title: Consul
    type: service
    hostname: cloud-client
    path: /
    port: 8500
  - title: Vault
    type: service
    hostname: cloud-client
    path: /
    port: 8200
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/14-update-intentions.html
  - title: Target lab architecture
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/16-final-architecture-hcs.html
  difficulty: basic
  timelimit: 300
- slug: test-application
  id: kpys2gyuzhal
  type: challenge
  title: 'Developer: Test Application'
  teaser: A short description of the challenge.
  assignment: |-
    You need to fetch the external DNS name for the Azure LB.

    ```
    kubectl config use-context frontend-aks
    endpoint=$(kubectl get services web -o json | jq -r .status.loadBalancer.ingress[0].ip)
    echo $endpoint
    ```

    Test the application. You should receive a `200` status code.
    Take note of the IP addresses of each service.

    ```
    curl -v -s $endpoint
    ```

    Well done! You just securely connected application workloads across multiple K8s clusters!!!
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Cloud  CLI
    type: terminal
    hostname: cloud-client
  - title: Consul
    type: service
    hostname: cloud-client
    path: /
    port: 8500
  - title: Vault
    type: service
    hostname: cloud-client
    path: /
    port: 8200
  - title: Current lab setup
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/15-test-application.html
  - title: Target lab architecture
    type: website
    url: https://htmlpreview.github.io/?https://raw.githubusercontent.com/hashicorp/field-workshops-consul/add-consul-instruqt-hcs-azure-track/instruqt-tracks/consul-hcs-on-azure/assets/diagrams/16-final-architecture-hcs.html
  difficulty: basic
  timelimit: 300
checksum: "9325295190497005254"
