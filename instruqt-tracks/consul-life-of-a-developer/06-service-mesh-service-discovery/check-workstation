#!/bin/bash

#run this check again to make sure the app is not broken.

#context
kubectl config use-context k8s1

#get the nodeport
port=$(kubectl get svc public-api-service -o json | jq '.spec.ports[0].nodePort')
if [ -z "$port" ]; then
  fail-message "NodePort not set."
  exit 1
fi

#check product
product=$(curl -s -o /dev/null -w "%{http_code}" http://k8s1:${port}/api \
-H 'Accept-Encoding: gzip, deflate, br' \
-H 'Content-Type: application/json' \
-H 'Accept: application/json' \
-H 'Connection: keep-alive' \
-H 'DNT: 1' \
--data-binary '{"query":"{\n  coffees{id,name,price}\n}"}' \
--compressed)
if [ "$product" != "200" ]; then
  fail-message "Product API did not return a 200."
  exit 1
fi

#check payment
payment=$(curl -s -o /dev/null -w "%{http_code}" http://k8s1:${port}/api \
-H 'Accept-Encoding: gzip, deflate, br' \
-H 'Content-Type: application/json' \
-H 'Accept: application/json' \
-H 'Connection: keep-alive' \
-H 'DNT: 1' \
--data-binary '{"query":"mutation{ pay(details:{ name: \"nic\", type: \"mastercard\", number: \"1234123-0123123\", expiry:\"10/02\", cv2: 1231, amount: 12.23 }){id, card_plaintext, card_ciphertext, message } }"}' \
--compressed)
if [ "$payment" != "200" ]; then
  fail-message "Payment API did not return a 200."
  exit 1
fi

#run this check to make sure

exit 0
