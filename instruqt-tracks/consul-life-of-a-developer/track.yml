slug: consul-life-of-a-developer
id: aoub5e2nrioo
type: track
title: 'Consul: Life of a Developer'
teaser: A short description of the track.
description: |-
  A long description of the track.

  You can use any GitHub flavoured markdown.
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/default.png
tags: []
owner: hashicorp
developers:
- lance@hashicorp.com
private: false
published: false
show_timer: true
challenges:
- slug: 00-service-mesh-environment-review
  id: 6tw2q7smpvyn
  type: challenge
  title: Service Mesh - Environment Review
  teaser: test
  assignment: test
  tabs:
  - title: Workstation
    type: terminal
    hostname: workstation
  difficulty: basic
  timelimit: 500
- slug: 01-service-mesh-connect-your-runtimes
  id: xogaq1wuisti
  type: challenge
  title: Service Mesh - Connect Your Runtimes - Part 1
  teaser: Connect Stateless K8s Cluster
  assignment: |-
    You can see the complete guide on Kubernetes multi-cluster federation here: https://www.consul.io/docs/k8s/installation/multi-cluster/kubernetes <br>

    Start deploying to the stateless cluster with Helm. <br>

    ```
    kubectl config use-context k8s1
    helm install -f /root/helm/k8s1-consul-values.yaml consul hashicorp/consul  --wait --debug
    ```

    Check the pods. <br>

    ```
    kubectl get pods
    ```

    Check the Consul API. You can also see the Consul UI is now up. <br>

    ```
    curl localhost:8500/v1/status/leader
    ```

    In the next assignment you will federate with the other K8s clusters.
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Workstation
    type: terminal
    hostname: workstation
  - title: K8s1 - Dashboard Token
    type: code
    hostname: k8s1
    path: /root/dashboard-token.txt
  - title: K8s1 - Dashboard
    type: service
    hostname: k8s1
    path: /api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
    port: 8001
  - title: Consul UI
    type: service
    hostname: workstation
    path: /ui/
    port: 8500
  - title: Helm Config
    type: code
    hostname: workstation
    path: /root/helm
  - title: Vault UI
    type: service
    hostname: k8s1
    path: /
    port: 30020
  difficulty: basic
  timelimit: 300
- slug: 02-service-mesh-connect-your-runtimes
  id: 7myytdfzgmp6
  type: challenge
  title: Service Mesh - Connect Your Runtimes - Part 2
  teaser: Connect Stateful K8s Cluster
  assignment: |-
    In this assignment you will finish the steps in this guide for the secondary cluster: https://www.consul.io/docs/k8s/installation/multi-cluster/kubernetes <br>

    First, create the federation secret. The helm chart created this for you on the primary cluster. Use the below command to extract it.

    ```
    kubectl config use-context k8s1
    kubectl get secret consul-federation -o yaml > consul-federation-secret.yaml
    ```

    Switch the second k8s cluster.

    ```
    kubectl config use-context k8s2
    kubectl apply -f consul-federation-secret.yaml
    ```

    Deploy Consul to k8s2 cluster.

    ```
    kubectl config use-context k8s2
    helm install -f /root/helm/k8s2-consul-values.yaml hashicorp hashicorp/consul  --wait --debug
    ```

    Check that the Kubernetes clusters are now federated.

    ```
    consul members -wan
    ```

    In this new few assignments, you will deploy workloads to these clusters.
  notes:
  - type: text
    contents: Replace this text with your own text
  tabs:
  - title: Workstation
    type: terminal
    hostname: workstation
  - title: K8s2 - Dashboard Token
    type: code
    hostname: k8s2
    path: /root/dashboard-token.txt
  - title: K8s2- Dashboard
    type: service
    hostname: k8s2
    path: /api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
    port: 8001
  - title: Consul UI
    type: service
    hostname: workstation
    path: /ui/
    port: 8500
  - title: Helm Config
    type: code
    hostname: workstation
    path: /root/helm
  difficulty: basic
  timelimit: 1800
- slug: 03-service-mesh-deploy-your-application-stateful
  id: 5tex6qnmgudx
  type: challenge
  title: Service Mesh - Deploy Your Application -  Stateful
  teaser: test
  assignment: |
    In this assignment you will deploy the stateful storage of your application to the K8s2 cluster. <br>

    Start by applying the proxy defaults to the cluster. You will use this configuration later for the observability assignments. <br>

    ```
    kubectl config use-context k8s1
    kubectl apply -f config/proxy-defaults.yml
    ```

    Now deploy the stateful storage components.

    ```
    kubectl config use-context k8s2
    kubectl apply -f storage
    ```
  tabs:
  - title: Workstation
    type: terminal
    hostname: workstation
  - title: K8s2 - Dashboard Token
    type: code
    hostname: k8s2
    path: /root/dashboard-token.txt
  - title: K8s2 - Dashboard
    type: service
    hostname: k8s2
    path: /api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
    port: 8001
  - title: Consul UI
    type: service
    hostname: workstation
    path: /ui/k8s2
    port: 8500
  - title: K8s Deployment
    type: code
    hostname: workstation
    path: /root/deployments
  difficulty: basic
  timelimit: 500
- slug: 04-service-mesh-deploy-your-application-stateless
  id: db2no1mjypbf
  type: challenge
  title: Service Mesh - Deploy Your Application - Stateless
  teaser: test
  assignment: |
    In this assignment you will deploy the stateless components of your application to the K8s1 cluster.
    You will deploy the `v3` version of this application. <br>


    Now deploy the frontend, public API, payments API, and product API components.

    ```
    kubectl config use-context k8s1
    kubectl apply -f v1
    ```

    In the next assignment we will connect these components to the storage tier in the other K8s cluster.
  tabs:
  - title: Workstation
    type: terminal
    hostname: workstation
  - title: K8s1 - Dashboard Token
    type: code
    hostname: k8s1
    path: /root/dashboard-token.txt
  - title: K8s1 - Dashboard
    type: service
    hostname: k8s1
    path: /api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
    port: 8001
  - title: Consul UI
    type: service
    hostname: workstation
    path: /ui/
    port: 8500
  - title: K8s Deployment
    type: code
    hostname: workstation
    path: /root/deployments
  difficulty: basic
  timelimit: 500
- slug: 05-service-mesh-test-your-application
  id: mbzfwov3rzcj
  type: challenge
  title: Service Mesh - Test Your Application
  teaser: test
  assignment: |-
    Your application should now be available.  We can quickly test the APIs by exposing the public API as a NodePort services.
    NodePort services are uncommon in production, but suitable for dev and test. <br>

    Expose the public API service.

    ```
    kubectl config use-context k8s1
    kubectl expose deployment public-api --type=NodePort --name=public-api-service
    ```

    Fetch the details of the service you just created.

    ```
    kubectl describe svc public-api-service
    port=$(kubectl get svc public-api-service -o json | jq '.spec.ports[0].nodePort')
    ```

    Try the product API. <br>

    ```
    curl -s -v http://k8s1:${port}/api \
    -H 'Accept-Encoding: gzip, deflate, br' \
    -H 'Content-Type: application/json' \
    -H 'Accept: application/json' \
    -H 'Connection: keep-alive' \
    -H 'DNT: 1' \
    --data-binary '{"query":"{\n  coffees{id,name,price}\n}"}' \
    --compressed | jq
    ```

    Try the payment API. <br>

    ```
    curl -s -v http://k8s1:${port}/api \
    -H 'Accept-Encoding: gzip, deflate, br' \
    -H 'Content-Type: application/json' \
    -H 'Accept: application/json' \
    -H 'Connection: keep-alive' \
    -H 'DNT: 1' \
    --data-binary '{"query":"mutation{ pay(details:{ name: \"nic\", type: \"mastercard\", number: \"1234123-0123123\", expiry:\"10/02\", cv2: 1231, amount: 12.23 }){id, card_plaintext, card_ciphertext, message } }"}' \
    --compressed | jq
    ```

    You should have received a 200 status code from the app API.  <br>

    In the next few assignments you will be introduced to more advanced traffic management patterns.
  tabs:
  - title: Workstation
    type: terminal
    hostname: workstation
  - title: K8s1 - Dashboard Token
    type: code
    hostname: k8s1
    path: /root/dashboard-token.txt
  - title: K8s1 - Dashboard
    type: service
    hostname: k8s1
    path: /api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
    port: 8001
  - title: Consul UI
    type: service
    hostname: workstation
    path: /ui/
    port: 8500
  - title: K8s Deployment
    type: code
    hostname: workstation
    path: /root/deployments/ingress
  difficulty: basic
  timelimit: 500
- slug: 06-traffic-management-ingress
  id: 5qnkobx3dujj
  type: challenge
  title: 'Traffic Management: Ingress'
  teaser: test
  assignment: |-
    Review and apply the ingress config.

    ```
    kubectl config use-context k8s1
    kubectl apply -f ingress/hashicups.yml
    ```

    Your ingress config is now in Consul. <br>

    ```
    consul config read -kind ingress-gateway -name ingress-gateway | jq
    ```

    In the next assignment you will configure request routing for this ingress gateway.
  tabs:
  - title: Workstation
    type: terminal
    hostname: workstation
  - title: K8s1 - Dashboard Token
    type: code
    hostname: k8s1
    path: /root/dashboard-token.txt
  - title: K8s1 - Dashboard
    type: service
    hostname: k8s1
    path: /api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
    port: 8001
  - title: Consul UI
    type: service
    hostname: workstation
    path: /ui
    port: 8500
  - title: K8s Deployment
    type: code
    hostname: workstation
    path: /root/deployments/ingress
  - title: App
    type: service
    hostname: k8s1
    path: /
    port: 30080
  difficulty: basic
  timelimit: 500
- slug: 07-traffic-management-request-routing
  id: olcwgzsryftu
  type: challenge
  title: 'Traffic Management: Request Routing'
  teaser: test
  assignment: |-
    Review the routes and apply the routing configuration.  <br>

    ```
    kubectl config use-context k8s1
    kubectl apply -f ingress/service-router.yml
    ```

    Reload the App tab to see the application that is now served over the ingress gateway. <br>

    Get the gateway IP. <br>

    ```
    kubectl describe svc consul-ingress-gateway
    port=$(kubectl get svc consul-ingress-gateway -o json | jq '.spec.ports[0].nodePort')
    ```

    Test the product API. <br>

    ```
    curl -s -v http://k8s1:${port}/api \
    -H 'Accept-Encoding: gzip, deflate, br' \
    -H 'Content-Type: application/json' \
    -H 'Accept: application/json' \
    -H 'Connection: keep-alive' \
    -H 'DNT: 1' \
    --data-binary '{"query":"{\n  coffees{id,name,price}\n}"}' \
    --compressed | jq
    ```

    Test the payment API. <br>

    ```
    curl -s -v http://k8s1:${port}/api \
    -H 'Accept-Encoding: gzip, deflate, br' \
    -H 'Content-Type: application/json' \
    -H 'Accept: application/json' \
    -H 'Connection: keep-alive' \
    -H 'DNT: 1' \
    --data-binary '{"query":"mutation{ pay(details:{ name: \"nic\", type: \"mastercard\", number: \"1234123-0123123\", expiry:\"10/02\", cv2: 1231, amount: 12.23 }){id, card_plaintext, card_ciphertext, message } }"}' \
    --compressed | jq
    ```
  tabs:
  - title: Workstation
    type: terminal
    hostname: workstation
  - title: K8s1 - Dashboard Token
    type: code
    hostname: k8s1
    path: /root/dashboard-token.txt
  - title: K8s1 - Dashboard
    type: service
    hostname: k8s1
    path: /api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/
    port: 8001
  - title: Consul UI
    type: service
    hostname: workstation
    path: /ui
    port: 8500
  - title: K8s Deployment
    type: code
    hostname: workstation
    path: /root/deployments/ingress
  - title: App
    type: service
    hostname: k8s1
    path: /
    port: 30080
    new_window: true
  difficulty: basic
  timelimit: 500
- slug: 08-traffic-management-traffic-shifting
  id: tmswarh6vq9w
  type: challenge
  title: 'Traffic Management: Traffic Shifting'
  teaser: test
  assignment: |-
    Review the routes and apply the routing configuration.  <br>

    ```
    kubectl config use-context k8s1
    kubectl apply -f v2
    ```

    Reload the App tab to see the application that is now served over the ingress gateway. <br>

    Test the API over the Ingress Gateway. <br>
  tabs:
  - title: Workstation
    type: terminal
    hostname: workstation
  - title: Consul UI
    type: service
    hostname: workstation
    path: /ui
    port: 8500
  - title: K8s Deployment
    type: code
    hostname: workstation
    path: /root/deployments/v2
  - title: App - V3
    type: service
    hostname: k8s1
    path: /?x-version=3
    port: 30080
    new_window: true
  - title: App - V4
    type: service
    hostname: k8s1
    path: /?x-version=4
    port: 30080
    new_window: true
  difficulty: basic
  timelimit: 500
- slug: 09-observability-metrics
  id: uxddr0p5hlph
  type: challenge
  title: 'Observability: Metrics'
  teaser: test
  assignment: test
  difficulty: basic
  timelimit: 500
- slug: 10-observability-tracing
  id: olkpnjqs2q2r
  type: challenge
  title: 'Observability: Tracing'
  teaser: test
  assignment: test
  difficulty: basic
  timelimit: 500
checksum: "18234236230493421534"
